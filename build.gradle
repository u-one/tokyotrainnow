
// Google App Engine plugin設定
/*
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
	}
}
*/

plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'

}

repositories {
	mavenCentral()
}

// Google App Engine plugin設定
// apply plugin: 'com.google.cloud.tools.appengine'

group = 'net.uoneweb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.io-informatics.oss:jackson-jsonld:0.1.1'
	/*
	implementation 'com.google.appengine:appengine-api-1.0-sdk:+'  // Google App Engine plugin設定
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-gcp-starter-data-datastore
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter-data-datastore:1.2.8.RELEASE'
	 */
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.assertj:assertj-core:3.21.0")
}

test {
	useJUnitPlatform {
		excludeTags 'smoke-test'
	}
	finalizedBy(jacocoTestReport)
}

jacocoTestReport {
	reports {
		xml.enabled(true)
		csv.enabled(false)
		html.enabled(true)
	}
	dependsOn(test)
}

// Google App Engine plugin設定
/*
appengine {
	deploy {
		projectId = 'tokyotrainnow'
		version = 'GCLOUD_CONFIG'
	}
}
*/

sourceSets {
	smokeTest {
		java {
			srcDir 'src/smoke-test/java'
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
		resources {
			srcDir 'src/smoke-test/resources'
		}
	}
}

configurations {
	smokeTestImplementation.extendsFrom testImplementation
	smokeTestCompile.extendsFrom testCompile
	smokeTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task smokeTest(group: 'verification', type: Test) {
	useJUnitPlatform{
		includeTags 'smoke-test'
	}
	classpath = sourceSets.smokeTest.runtimeClasspath
	testClassesDirs = sourceSets.smokeTest.output.classesDirs
}